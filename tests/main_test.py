import unittest
from io import BytesIO
from unittest import mock

from vk_api import upload

from Repository import CardFavorites, CardExceptions
from main import handle_start, handle_registration, ms, send_ask_edit_anketa, send_message, vk_srv, users_list, \
    send_message, set_param, save_anketa, main_menu, upload_photo, token
import requests
from main import find_users, view_next_card, view_back_card, check_user, handle_criteria, send_ask_edit_criteria, add_favorites, \
                  go_to_favorites, repository, delete_from_list, save_criteria


from User import User
from unittest.mock import patch, MagicMock, Mock

class TestHandleStart(unittest.TestCase):
    def setUp(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.user_id = 123456
        self.users_list = {self.user_id: None}

    def test_handle_start_new_user(self):
        # –¢–µ—Å—Ç –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
        result = handle_start(self.user_id, self.users_list)
        self.assertIsNotNone(result)
        self.assertIn(self.user_id, self.users_list)

    def test_handle_start_existing_user(self):
        # –¢–µ—Å—Ç –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        result = handle_start(self.user_id, self.users_list)
        self.assertIsNone(result)
        self.assertIn(self.user_id, self.users_list)

class TestHandleRegistration(unittest.TestCase):
    def setUp(self):
        self.user_id = 123456
        self.user = User(self.user_id)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä User –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.users_list = {self.user_id: None}
    @patch('main.send_message')  # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_message
    def test_handle_registration(self, mock_send_message):
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        result = handle_registration(self.user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è send_message –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        mock_send_message.assert_called_once_with(ms.get_registration_message(self.user)) # –≥–¥–µ ms - —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–æ–¥—É–ª—è

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
        self.assertIsNotNone(result)
        self.assertTrue(isinstance(result, int))

class TestSendAskEditAnketa(unittest.TestCase):
    @patch('vk_messages.User')
    @patch('main.ms')
    @patch('main.send_message')
    def test_send_ask_edit_anketa(self, mock_send_message, mock_ms, mock_user):
 # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç User —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        user = mock_user.return_value
        user.get_user_id.return_value = 123

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è ms.get_edit_message
        mock_ms.get_edit_message.return_value = 'Mocked edit message'

        # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        str_arg = 'step1'

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        send_ask_edit_anketa(user, str_arg)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ set_step –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        user.set_step.assert_called_once_with('anketa_'+str_arg)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ms.get_edit_message –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_ms.get_edit_message.assert_called_once_with(user.get_user_id(), str_arg)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_message –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        mock_send_message.assert_called_once_with('Mocked edit message')


class TestSendMessage(unittest.TestCase):
    @patch('your_module.vk_session.method')
    def test_send_message(self, mock_method):
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        test_message = {
            'peer_id': 123456789,
            'message': f'üöÄ –ü—Ä–∏–≤–µ—Ç, {first_name}! üëã –Ø ‚Äì –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —ç–∫–æ–Ω–æ–º–∏—Ç —Ç–≤–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ!'
                       f' ‚è± –•–æ—á–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?',
            'random_field': 'random_value'
        }

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        send_message(test_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ 'messages.send' –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_method.assert_called_once_with('messages.send', test_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
        self.assertIsNotNone(test_message.get('id'))
        self.assertTrue(isinstance(test_message.get('id'), int))
class TestSetParam(unittest.TestCase):

    @patch.object(User, 'get_step')
    @patch.object(User, 'set_first_name')
    def test_set_first_name(self, mock_set_first_name, mock_get_step):
        mock_get_step.return_value = 'anketa_first_name'
        user = User()
        set_param(user, 'John')
        mock_set_first_name.assert_called_once_with('John')

    @patch.object(User, 'get_step')
    @patch.object(User, 'set_last_name')
    def test_set_last_name(self, mock_set_last_name, mock_get_step):
        mock_get_step.return_value = 'anketa_last_name'
        user = User()
        set_param(user, 'Doe')
        mock_set_last_name.assert_called_once_with('Doe')

    @patch.object(User, 'get_step')
    @patch.object(User, 'set_age')
    def test_set_age(self, mock_set_age, mock_get_step):
        mock_get_step.return_value = 'anketa_age'

        user = User()
        set_param(user, '25')
        mock_set_age.assert_called_once_with('25')

    @patch.object(User, 'get_step')
    @patch.object(User, 'set_gender')
    def test_set_gender(self, mock_set_gender, mock_get_step):
        mock_get_step.return_value = 'anketa_gender'
        user = User()
        set_param(user, '1')
        mock_set_gender.assert_called_once_with(1)

    @patch.object(User, 'get_step')
    @patch.object(vk_srv, 'get_city_by_name')
    @patch.object(User, 'set_city')
    def test_set_city(self, mock_set_city, mock_get_city_by_name, mock_get_step):
        mock_get_step.return_value = 'anketa_city'
        mock_get_city_by_name.return_value = {'id': 1, 'name': 'Moscow'}
        user = User()
        set_param(user, 'Moscow')
        mock_set_city.assert_called_once_with({'id': 1, 'name': 'Moscow'})


class TestSaveAnketa(unittest.TestCase):
    @patch('your_module.repository')
    @patch('your_module.vk_session')
    def test_save_anketa(self, mock_vk_session, mock_repository):
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç User
        user_mock = Mock(spec=User)
        user_mock.get_id_msg_edit_id.return_value = 12345

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ repository.add_user
        mock_repository.add_user.return_value = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ vk_session.method
        mock_vk_session.method.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç–µ—Å—Ç–∏—Ä—É–µ–º
        save_anketa(user_mock)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_repository.add_user.assert_called_once_with(user_mock)
        mock_vk_session.method.assert_called_once_with('messages.delete', dict(message_ids=12345, delete_for_all=1))
        user_mock.set_id_msg_edit_id.assert_called_once_with(-1)

class TestMainMenuFunction(unittest.TestCase):
    @patch('User.User')
    @patch('vk_messages.ms.get_main_menu_message')
    @patch('main.send_message')
    def test_main_menu(self, mock_send_message, mock_get_main_menu_message, mock_user):
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–æ–≤ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        mock_user.return_value = MagicMock()
        mock_get_main_menu_message.return_value = 'Mocked main menu message'

        # –í—ã–∑–æ–≤ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        main_menu(mock_user.return_value)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–±—ä–µ–∫—Ç–µ User
        mock_user.return_value.set_list_cards.assert_called_once_with(None)
        mock_user.return_value.set_index_view.assert_called_once_with(-1)
        mock_user.return_value.set_id_msg_edit_id.assert_called_once_with(-1)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_main_menu_message
        mock_get_main_menu_message.assert_called_once_with(mock_user.return_value)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ send_message
        mock_send_message.assert_called_once_with('Mocked main menu message')

class TestUploadPhoto(unittest.TestCase):
    @mock.patch('requests.get')
    @mock.patch('vk_api.upload.VkUpload')
    def test_upload_photo(self, mock_upload, mock_get):
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–π URL –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        expected_url = "http://example.com/image.jpg"
        expected_content = b"mocked image content"

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è upload.photo_messages
        mock_upload_response = {
            'owner_id': 123,
            'id': 456,
            'access_key': 'abc'
        }
        mock_upload.return_value.photo_messages.return_value = [mock_upload_response]

        # –£—Å—Ç–∞–Ω–æ–≤–ª–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ requests.get
        mock_get.return_value.content = expected_content

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é upload_photo —Å –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞–º–∏
        result = upload_photo(mock_upload, expected_url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.assertEqual(result, mock_upload_response)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_get.assert_called_once_with(expected_url)
        mock_upload.return_value.photo_messages.assert_called_once_with(BytesIO(expected_content))
class TestFindUsers(unittest.TestCase):
    @patch('your_module.vk_srv.users_search')
    def test_find_users(self, mock_users_search):
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user = User(123)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–µ—Ç–æ–¥–∞ users_search
        mock_users_search.return_value = ['user1', 'user2']

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        find_users(upload=MagicMock(), user=user, vk_srv=vk_srv, token='token')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        self.assertEqual(user.get_criteria(), ['user1', 'user2'])
        self.assertEqual(user.get_index_view(), -1)


class TestViewNextCard(unittest.TestCase):
    @patch('main.upload_photo')
    @patch('main.get_message_view')
    @patch('main.send_message')
    @patch('main.main_menu')
    def test_view_next_card(self, mock_main_menu, mock_send_message, mock_get_message_view, mock_upload_photo):
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ User
        mock_user = Mock(spec=User)
        mock_user.get_size_list_cards.return_value = 3
        mock_user.get_index_view.return_value = 0
        mock_user.set_index_view.return_value = None
        mock_user.get_list_cards.return_value = [Mock(), Mock(), Mock()]
        mock_user.get_card.return_value = 'card_info'

        # –ú–æ–∫–∏ –¥–ª—è upload_photo
        mock_upload_photo.return_value = {'owner_id': 1, 'photo_id': 1, 'access_key': 1}

        # –ú–æ–∫–∏ –¥–ª—è get_message_view
        mock_get_message_view.return_value = 'message_view'

        # –ú–æ–∫–∏ –¥–ª—è send_message
        mock_send_message.return_value = None

        # –ú–æ–∫–∏ –¥–ª—è main_menu
        mock_main_menu.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –º–æ–∫–∞–º–∏
        view_next_card(Mock(), mock_user, Mock(), Mock())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_user.get_size_list_cards.assert_called_once()
        mock_user.get_index_view.assert_called_once()
        mock_user.set_index_view.assert_called_once_with(1)
        mock_user.get_list_cards.assert_called_once()
        mock_user.get_card.assert_called_once()
        mock_upload_photo.assert_called_once()
        mock_get_message_view.assert_called_once_with(','.join(['photo1_1_1']), 'card_info', mock_user)
        mock_send_message.assert_called_once_with('message_view')
        mock_main_menu.assert_not_called()


class TestViewBackCard(unittest.TestCase):
    @patch('main.upload_photo')
    @patch('main.get_message_view')
    @patch('main.send_message')
    def test_view_back_card(self, mock_send_message, mock_get_message_view, mock_upload_photo):
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞ User
        mock_user = Mock(spec=User)
        mock_user.get_index_view.return_value = 1
        mock_user.set_index_view.return_value = None
        mock_user.get_list_cards.return_value = [Mock(), Mock()]
        mock_user.get_card.return_value = 'card_info'

        # –ú–æ–∫–∏ –¥–ª—è upload_photo
        mock_upload_photo.return_value = {'owner_id': 1, 'photo_id': 1, 'access_key': 1}

        # –ú–æ–∫–∏ –¥–ª—è get_message_view
        mock_get_message_view.return_value = 'message_view'

        # –ú–æ–∫–∏ –¥–ª—è send_message
        mock_send_message.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –º–æ–∫–∞–º–∏
        view_back_card(mock_user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_user.get_index_view.assert_called_once()
        mock_user.set_index_view.assert_called_once_with(0)
        mock_user.get_list_cards.assert_called_once()
        mock_user.get_card.assert_called_once()
        mock_upload_photo.assert_called_once()
        mock_get_message_view.assert_called_once_with(','.join(['photo1_1_1']), 'info', mock_user)
        mock_send_message.assert_called_once_with('message_view')

class TestCheckUser(unittest.TestCase):
    @patch('main.repository.get_user')
    @patch('main.main_menu')
    @patch('main.send_message')
    def test_check_user(self, mock_send_message, mock_main_menu, mock_get_user):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_id = 12345
        mock_get_user.return_value = None

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        user = check_user(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        mock_get_user.assert_called_once_with(user_id)
        mock_send_message.assert_called_once()
        mock_main_menu.assert_not_called()
        self.assertIsNone(user)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        mock_get_user.return_value = MagicMock()
        mock_get_user.reset_mock()
        mock_send_message.reset_mock()
        mock_main_menu.reset_mock()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        user = check_user(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        mock_get_user.assert_called_once_with(user_id)
        mock_send_message.assert_not_called()
        mock_main_menu.assert_called_once_with(mock_get_user.return_value)
        self.assertIsInstance(user, MagicMock)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ–±—ä–µ–∫—Ç User
class TestHandleCriteria(unittest.TestCase):
    @patch('main.repository.open_criteria')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –º–æ–¥—É–ª—è, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è repository.open_criteria
    @patch('main.ms.get_message_criteria')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –º–æ–¥—É–ª—è, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è ms.get_message_criteria
    @patch('main.send_message')
    @patch('main.vk_session.method')
    def test_handle_criteria(self, mock_vk_session_method, mock_send_message, mock_get_message_criteria, mock_open_criteria):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user = MagicMock()
        user.get_criteria.return_value = None
        user.get_user_id.return_value = 123
        criteria_dict = {'key': 'value'}
        mock_open_criteria.return_value = criteria_dict

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        result = handle_criteria(user)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.assertIsNone(result)
        user.set_criteria.assert_called_once_with(criteria_dict)
        mock_get_message_criteria.assert_called_once_with(user)
        mock_send_message.assert_called_once_with(mock_get_message_criteria.return_value)
        mock_vk_session_method.assert_not_called()

        # –¢–µ—Å—Ç –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ user.get_id_msg_edit_id() > -1
        user.get_id_msg_edit_id.return_value = 1
        result = handle_criteria(user)
        self.assertIsNone(result( mock_vk_session_method.assert_called_once_with('messages.delete', {'message_ids': 1, 'delete_for_all': 1})))

class TestSendAskEditCriteria(unittest.TestCase):
    @patch('main.ms')
    @patch('main.send_message')
    def test_send_ask_edit_criteria(self, mock_send_message, mock_ms):
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_user = MagicMock(spec=User)
        mock_user.get_user_id.return_value = 123456789
        mock_user.set_step.return_value = None

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–æ–∫-–º–µ—Ç–æ–¥–æ–≤
        mock_ms.get_edit_message.return_value = 'expected_message'

        # –í—ã–∑—ã–≤–∞–µ–º—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        send_ask_edit_criteria(mock_user, 'test_arg')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_user.set_step.assert_called_once_with('criteria_test_arg')
        mock_ms.get_edit_message.assert_called_once_with(123456789, 'test_arg')
        mock_send_message.assert_called_once_with('expected_message')

class TestAddFavorites(unittest.TestCase):
    def setUp(self):
        self.repository = Mock()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Mock –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        self.user = User()  # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤

    def test_add_favorites(self):
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        add_favorites(self.repository, self.user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ add_favorites –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        self.repository.add_favorites.assert_called_once_with(self.user)

class TestGoToFavorites(unittest.TestCase):
    @patch('main.repository.get_favorites')
    @patch('main.set_list_cards')
    @patch('User.User.set_index_view')
    @patch('main.view_next_card')
    @patch('main.ms.get_message_error_search')
    @patch('main.send_message')
    def test_go_to_favorites(self, mock_send_message, mock_get_message_error_search, mock_view_next_card, mock_set_index_view, mock_set_list_cards, mock_get_favorites):
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è User
        user = Mock(spec=User)
        user.get_user_id.return_value= 123

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è upload, vk_srv –∏ token_api
        upload = Mock()
        vk_srv = Mock()
        token_api = Mock()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ get_favorites
        mock_get_favorites.return_value = ['card1', 'card2']

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        go_to_favorites(upload, user, repository, token_api)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_set_list_cards.assert_called_once_with(['card1', 'card2'])
        mock_set_index_view.assert_called_once_with(-1)
        mock_view_next_card.assert_called_once()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ get_favorites –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—É—Å—Ç
        mock_get_favorites.return_value = None

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        go_to_favorites(upload, user, repository, token_api)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_get_message_error_search.assert_called_once_with(user.get_user_id())
        mock_send_message.assert_called_once_with(mock_get_message_error_search.return_value)

class TestDeleteFromList(unittest.TestCase):
    '''
    –í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è `User`, `repository`,
     `CardFavorites` –∏ `CardExceptions`. –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è `delete_from_list` –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
     `repository` –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç `view_next_card`
     –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏.
    '''
    def setUp(self):
        self.user = Mock(spec=User)
        self.repository = Mock(spec=repository)
        self.user.get_list_cards.return_value = [Mock(spec=CardFavorites), Mock(spec=CardExceptions)]
        self.user.get_card.return_value = Mock()
        self.user.delete_card.return_value = None

    @patch('main.view_next_card')
    def test_delete_from_list_favorites(self, mock_view_next_card):
        self.user.get_list_cards.return_value = [Mock(spec=CardFavorites)]
        delete_from_list(self.user, self.repository)
        self.repository.delete_favorites.assert_called_once_with(self.user.get_user_id(), self.user.get_card().profile)
        mock_view_next_card.assert_called_once_with(upload, self.user, vk_srv, token)

    @patch('main.view_next_card')
    def test_delete_from_list_exceptions(self, mock_view_next_card):
        self.user.get_list_cards.return_value = [Mock(spec=CardExceptions)]
        delete_from_list(self.user, self.repository)
        self.repository.delete_exceptions.assert_called_once_with(self.user.get_user_id(), self.user.get_card().profile)
        mock_view_next_card.assert_called_once_with(upload, self.user, vk_srv, token)

    def test_delete_from_list_empty_list(self):
        self.user.get_list_cards.return_value = []
        delete_from_list(self.user, self.repository)
        self.repository.delete_favorites.assert_not_called()
        self.repository.delete_exceptions.assert_not_called()

class TestSaveCriteria(unittest.TestCase):
    @patch('main.repository')
    @patch('main.users_list')
    @patch('main.vk_session')
    @patch('main.ms')
    @patch('main.send_message')
    @patch('main.main_menu')
    def test_save_criteria(self, mock_main_menu, mock_send_message, mock_ms, mock_vk_session, mock_users_list, mock_repository):
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = MagicMock()
        user.get_user_id.return_value = 123
        user.get_id_msg_edit_id.return_value = 456
        users_list.__getitem__.return_value = user

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è message_id
        message_id = 789

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç–µ—Å—Ç–∏—Ä—É–µ–º
        save_criteria(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ save_criteria –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_repository.save_criteria.assert_called_once_with(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ set_id_msg_edit_id –±—ã–ª –≤—ã–∑–≤–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        user.set_id_msg_edit_id.assert_called_once_with(message_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ messages.delete –±—ã–ª –≤—ã–∑–≤–∞–Ω —É vk_session —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        mock_vk_session.method.assert_called_once_with(
            'messages.delete',
            dict(message_ids=456, delete_for_all=1)
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ get_message_done_registration –±—ã–ª –≤—ã–∑–≤–∞–Ω —É ms —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        mock_ms.get_message_done_registration.assert_called_once_with(123)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ send_message –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        mock_send_message.assert_called_once_with(mock_ms.get_message_done_registration.return_value)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ main_menu –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        mock_main_menu.assert_called_once_with(user)

if __name__ == '__main__':
    unittest.main()